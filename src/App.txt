// App.jsx
import { Canvas, useFrame } from '@react-three/fiber'
import { useRef, useState, useEffect } from 'react'
import Membrane from './Membrane'
import Nucleus from './NucleusMesh'
import Cytoplasm from './Cytoplasm'
import GlowRing from './GlowRing'
import * as THREE from 'three'
import './App.css'
import { Environment } from '@react-three/drei'
import { EffectComposer, Bloom, DepthOfField } from '@react-three/postprocessing'
import TextField from '@mui/material/TextField'
import Box from '@mui/material/Box'
import Typography from '@mui/material/Typography'
import IconButton from '@mui/material/IconButton'
import InputAdornment from '@mui/material/InputAdornment'
import MicIcon from '@mui/icons-material/Mic'
import GraphicEqIcon from '@mui/icons-material/GraphicEq'
import CircularProgress from '@mui/material/CircularProgress'
import EventAvailableIcon from '@mui/icons-material/EventAvailable';

function AutoOrbitCamera() {
  const ref = useRef()
  useFrame(({ camera, clock }) => {
    const t = clock.getElapsedTime()
    camera.position.x = Math.sin(t * 0.2) * 5
    camera.position.z = Math.cos(t * 0.2) * 5
    camera.lookAt(0, 0, 0)
  })
  return null
}

export default function App() {
  const [prompt, setPrompt] = useState('')
  const [messages, setMessages] = useState([])
  const [input, setInput] = useState('')
  const [loading, setLoading] = useState(false)
  const scrollRef = useRef()

  useEffect(() => {
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight
    }
  }, [messages])

  const sendMessage = async () => {
    if (!input.trim()) return
    const newMessages = [...messages, { role: 'user', content: input }]
    setMessages(newMessages)
    setInput('')
    setLoading(true)

    try {
      const res = await fetch('/api/chat/stream', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ messages: newMessages, language: 'es' })
      })

      const reader = res.body.getReader()
      const decoder = new TextDecoder('utf-8')
      let fullText = ''

      setMessages([...newMessages, { role: 'assistant', content: '' }])

      while (true) {
        const { value, done } = await reader.read()
        if (done) break
        const chunk = decoder.decode(value, { stream: true })
        fullText += chunk
        setMessages(prev => {
          const updated = [...prev]
          updated[updated.length - 1] = { role: 'assistant', content: fullText }
          return updated
        })
      }
    } catch (error) {
      setMessages([...newMessages, { role: 'assistant', content: 'Error contacting assistant.' }])
    }

    setLoading(false)
  }

  return (
    <div className="container" style={{ fontFamily: 'Manrope, sans-serif' }}>
      <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@300;700&display=swap" rel="stylesheet" />
      <Canvas
        camera={{ position: [0, 0, 5], fov: 50 }}
        gl={{ alpha: true, antialias: true, toneMapping: THREE.ACESFilmicToneMapping }}
        shadows
      >
        <color attach="background" args={["#dfe4ea"]} />
        <ambientLight intensity={0.3} />
        <directionalLight position={[5, 5, 5]} intensity={0.4} castShadow />
        <Environment preset="sunset" background={false} />
        <AutoOrbitCamera />
        <Membrane />
        {/* <GlowRing /> */}
        <Nucleus />
        <Cytoplasm />
        <EffectComposer>
          <Bloom intensity={0.15} luminanceThreshold={0.7} luminanceSmoothing={0.4} />
          <DepthOfField focusDistance={0.02} focalLength={0.01} bokehScale={1.2} height={480} />
        </EffectComposer>
      </Canvas>

      <Box
        ref={scrollRef}
        sx={{
          position: 'absolute',
          bottom: 100,
          left: '50%',
          transform: 'translateX(-50%)',
          px: 2,
          maxHeight: '30vh',
          overflowY: 'auto',
          display: 'flex',
          flexDirection: 'column',
          width: '100%',
          maxWidth: '720px',
          '&::-webkit-scrollbar': {
            width: '5px',
          },
          '&::-webkit-scrollbar-track': {
            backgroundColor: '#c6c6c6ff',
          },
          '&::-webkit-scrollbar-thumb': {
            backgroundColor: '#959595ff',
            borderRadius: '5px',
          }
        }}
      >
        {messages.map((m, i) => (
          <Typography
            key={i}
            variant="body2"
            sx={{
              mb: 1,
              color: m.role === 'user' ? '#181818ff' : '#5c5c5cff',
              textAlign: 'left', // ğŸ‘ˆ Unified alignment
              maxWidth: '100%',
              fontFamily: 'Manrope',
              fontWeight: m.role === 'user' ? 700 : 300,
            }}
          >
            {m.content}
          </Typography>
        ))}
      </Box>


      <Box
        className="prompt-box"
        sx={{
          position: 'absolute',
          bottom: 20,
          left: '50%',
          transform: 'translateX(-50%)',
          display: 'flex',
          alignItems: 'right',
          bgcolor: '#e7e7e7ff',
          borderRadius: '20px',
          maxWidth: 600,
          width: '90%',
          px: 2,
          py: 1
        }}
      >
        <TextField
          fullWidth
          variant="standard"
          placeholder="Pregunta lo sobre cÃ©lulas madre"
          InputProps={{
            disableUnderline: true,
            sx: { ml: 1, color: '#202020', fontFamily: 'Manrope', fontSize:15 },
            value: input,
            onChange: (e) => setInput(e.target.value),
            onKeyDown: (e) => e.key === 'Enter' && sendMessage(),
            endAdornment: (
              <InputAdornment position="end">
                {/* <IconButton><EventAvailableIcon sx={{ color: '#202020' }} /></IconButton> */}
                {/* <IconButton><MicIcon sx={{ color: '#202020' }} /></IconButton> */}
                <IconButton onClick={sendMessage} disabled={loading}>
                  {/* {loading ? <CircularProgress size={20} /> : <GraphicEqIcon sx={{ color: '#202020' }} />} */}
                  {loading ? <CircularProgress size={20} /> : <EventAvailableIcon sx={{ color: '#202020' }} />}
                </IconButton>
              </InputAdornment>
            )
          }}
        />
      </Box>
    </div>
  )
}



////////////////////////////////////////////////////////


// // App.jsx
// import { Canvas, useFrame } from '@react-three/fiber'
// import { useRef, useState, useEffect } from 'react'
// import Membrane from './Membrane'
// import Nucleus from './NucleusMesh'
// import Cytoplasm from './Cytoplasm'
// import GlowRing from './GlowRing'
// import * as THREE from 'three'
// import './App.css'
// import { Environment } from '@react-three/drei'
// import { EffectComposer, Bloom, DepthOfField } from '@react-three/postprocessing'
// import TextField from '@mui/material/TextField'
// import Box from '@mui/material/Box'
// import Typography from '@mui/material/Typography'
// import IconButton from '@mui/material/IconButton'
// import InputAdornment from '@mui/material/InputAdornment'
// import MicIcon from '@mui/icons-material/Mic'
// import GraphicEqIcon from '@mui/icons-material/GraphicEq'
// import CircularProgress from '@mui/material/CircularProgress'
// import EventAvailableIcon from '@mui/icons-material/EventAvailable';

// function AutoOrbitCamera() {
//   const ref = useRef()
//   useFrame(({ camera, clock }) => {
//     const t = clock.getElapsedTime()
//     camera.position.x = Math.sin(t * 0.2) * 5
//     camera.position.z = Math.cos(t * 0.2) * 5
//     camera.lookAt(0, 0, 0)
//   })
//   return null
// }

// export default function App() {
//   const [prompt, setPrompt] = useState('')
//   const [messages, setMessages] = useState([])
//   const [input, setInput] = useState('')
//   const [loading, setLoading] = useState(false)
//   const scrollRef = useRef()

//   useEffect(() => {
//     if (scrollRef.current) {
//       scrollRef.current.scrollTop = scrollRef.current.scrollHeight
//     }
//   }, [messages])

//   const sendMessage = async () => {
//     if (!input.trim()) return
//     const newMessages = [...messages, { role: 'user', content: input }]
//     setMessages(newMessages)
//     setInput('')
//     setLoading(true)

//     try {
//       const res = await fetch('/api/chat/stream', {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify({ messages: newMessages, language: 'es' })
//       })

//       const reader = res.body.getReader()
//       const decoder = new TextDecoder('utf-8')
//       let fullText = ''

//       setMessages([...newMessages, { role: 'assistant', content: '' }])

//       while (true) {
//         const { value, done } = await reader.read()
//         if (done) break
//         const chunk = decoder.decode(value, { stream: true })
//         fullText += chunk
//         setMessages(prev => {
//           const updated = [...prev]
//           updated[updated.length - 1] = { role: 'assistant', content: fullText }
//           return updated
//         })
//       }
//     } catch (error) {
//       setMessages([...newMessages, { role: 'assistant', content: 'Error contacting assistant.' }])
//     }

//     setLoading(false)
//   }

//   return (
//     <div className="container" style={{ fontFamily: 'Manrope, sans-serif' }}>
//       <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@300;700&display=swap" rel="stylesheet" />
//       <Canvas
//         camera={{ position: [0, 0, 5], fov: 50 }}
//         gl={{ alpha: true, antialias: true, toneMapping: THREE.ACESFilmicToneMapping }}
//         shadows
//       >
//         <color attach="background" args={["#dfe4ea"]} />
//         <ambientLight intensity={0.3} />
//         <directionalLight position={[5, 5, 5]} intensity={0.4} castShadow />
//         <Environment preset="sunset" background={false} />
//         <AutoOrbitCamera />
//         <Membrane />
//         {/* <GlowRing /> */}
//         <Nucleus />
//         <Cytoplasm />
//         <EffectComposer>
//           <Bloom intensity={0.15} luminanceThreshold={0.7} luminanceSmoothing={0.4} />
//           <DepthOfField focusDistance={0.02} focalLength={0.01} bokehScale={1.2} height={480} />
//         </EffectComposer>
//       </Canvas>

//       <Box
//         ref={scrollRef}
//         sx={{
//           position: 'absolute',
//           bottom: 100,
//           left: '50%',
//           transform: 'translateX(-50%)',
//           px: 2,
//           maxHeight: '40vh',
//           overflowY: 'auto',
//           display: 'flex',
//           flexDirection: 'column',
//           width: '100%',
//           backdropFilter: 'blur(12px)',
//           backgroundColor: 'rgba(255, 255, 255, 0.1)',
//           borderRadius: 2,
//           padding: 2,
//           maxWidth: '720px',
//           '&::-webkit-scrollbar': {
//             width: '5px',
//           },
//           '&::-webkit-scrollbar-track': {
//             backgroundColor: '#c6c6c6ff',
//           },
//           '&::-webkit-scrollbar-thumb': {
//             backgroundColor: '#545454ff',
//             borderRadius: '5px',
//           }
          
//         }}
//       >
//         {messages.map((m, i) => (
//           <Typography
//             key={i}
//             variant="body2"
//             sx={{
//               mb: 1,
//               color: m.role === 'user' ? '#181818ff' : '#5c5c5cff',
//               textAlign: 'left', // ğŸ‘ˆ Unified alignment
//               maxWidth: '100%',
//               fontFamily: 'Manrope',
//               fontWeight: m.role === 'user' ? 700 : 300,
//             }}
//           >
//             {m.content}
//           </Typography>
//         ))}
//       </Box>


//       <Box
//         className="prompt-box"
//         sx={{
//           position: 'absolute',
//           bottom: 20,
//           left: '50%',
//           transform: 'translateX(-50%)',
//           display: 'flex',
//           alignItems: 'right',
//           bgcolor: '#e7e7e7ff',
//           borderRadius: '20px',
//           maxWidth: 600,
//           width: '90%',
//           px: 2,
//           py: 1
//         }}
//       >
//         <TextField
//           fullWidth
//           variant="standard"
//           placeholder="Pregunta lo sobre cÃ©lulas madre"
//           InputProps={{
//             disableUnderline: true,
//             sx: { ml: 1, color: '#202020', fontFamily: 'Manrope', fontSize:15 },
//             value: input,
//             onChange: (e) => setInput(e.target.value),
//             onKeyDown: (e) => e.key === 'Enter' && sendMessage(),
//             endAdornment: (
//               <InputAdornment position="end">
//                 {/* <IconButton><EventAvailableIcon sx={{ color: '#202020' }} /></IconButton> */}
//                 {/* <IconButton><MicIcon sx={{ color: '#202020' }} /></IconButton> */}
//                 <IconButton onClick={sendMessage} disabled={loading}>
//                   {/* {loading ? <CircularProgress size={20} /> : <GraphicEqIcon sx={{ color: '#202020' }} />} */}
//                   {loading ? <CircularProgress size={20} /> : <EventAvailableIcon sx={{ color: '#202020' }} />}
//                 </IconButton>
//               </InputAdornment>
//             )
//           }}
//         />
//       </Box>
//     </div>
//   )
// }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// // App.jsx
// import { Canvas, useFrame } from '@react-three/fiber'
// import { useRef, useState, useEffect } from 'react'
// import Membrane from './Membrane'
// import Nucleus from './NucleusMesh'
// import Cytoplasm from './Cytoplasm'
// import GlowRing from './GlowRing'
// import * as THREE from 'three'
// import './App.css'
// import { Environment } from '@react-three/drei'
// import { EffectComposer, Bloom, DepthOfField } from '@react-three/postprocessing'
// import TextField from '@mui/material/TextField'
// import Box from '@mui/material/Box'
// import Typography from '@mui/material/Typography'
// import IconButton from '@mui/material/IconButton'
// import InputAdornment from '@mui/material/InputAdornment'
// import MicIcon from '@mui/icons-material/Mic'
// import GraphicEqIcon from '@mui/icons-material/GraphicEq'
// import CircularProgress from '@mui/material/CircularProgress'
// import Chip from '@mui/material/Chip'
// import Stack from '@mui/material/Stack'

// function AutoOrbitCamera() {
//   const ref = useRef()
//   useFrame(({ camera, clock }) => {
//     const t = clock.getElapsedTime()
//     camera.position.x = Math.sin(t * 0.2) * 5
//     camera.position.z = Math.cos(t * 0.2) * 5
//     camera.lookAt(0, 0, 0)
//   })
//   return null
// }

// export default function App() {
//   const [prompt, setPrompt] = useState('')
//   const [messages, setMessages] = useState([])
//   const [input, setInput] = useState('')
//   const [loading, setLoading] = useState(false)
//   const scrollRef = useRef()

//   const defaultQuestions = [
//     'Beneficios de cÃ©lulas madre',
//     'Terapia Celular',
//     'Pruebas GenÃ©ticas',
//   ]

//   useEffect(() => {
//     if (scrollRef.current) {
//       scrollRef.current.scrollTop = scrollRef.current.scrollHeight
//     }
//   }, [messages])

//   const sendMessage = async () => {
//     if (!input.trim()) return
//     const newMessages = [...messages, { role: 'user', content: input }]
//     setMessages(newMessages)
//     setInput('')
//     setLoading(true)

//     try {
//       const res = await fetch('/api/chat/stream', {
//         method: 'POST',
//         headers: { 'Content-Type': 'application/json' },
//         body: JSON.stringify({ messages: newMessages, language: 'es' })
//       })

//       const reader = res.body.getReader()
//       const decoder = new TextDecoder('utf-8')
//       let fullText = ''

//       setMessages([...newMessages, { role: 'assistant', content: '' }])

//       while (true) {
//         const { value, done } = await reader.read()
//         if (done) break
//         const chunk = decoder.decode(value, { stream: true })
//         fullText += chunk
//         setMessages(prev => {
//           const updated = [...prev]
//           updated[updated.length - 1] = { role: 'assistant', content: fullText }
//           return updated
//         })
//       }
//     } catch (error) {
//       setMessages([...newMessages, { role: 'assistant', content: 'Error contacting assistant.' }])
//     }

//     setLoading(false)
//   }

//   return (
//     <div className="container" style={{ fontFamily: 'Manrope, sans-serif' }}>
//       <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@300;700&display=swap" rel="stylesheet" />

//       <Canvas
//         camera={{ position: [0, 0, 5], fov: 50 }}
//         gl={{ alpha: true, antialias: true, toneMapping: THREE.ACESFilmicToneMapping }}
//         shadows
//       >
//         <color attach="background" args={["#dfe4ea"]} />
//         <ambientLight intensity={0.3} />
//         <directionalLight position={[5, 5, 5]} intensity={0.4} castShadow />
//         <Environment preset="sunset" background={false} />
//         <AutoOrbitCamera />
//         <Membrane />
//         {/* <GlowRing /> */}
//         <Nucleus />
//         <Cytoplasm />
//         <EffectComposer>
//           <Bloom intensity={0.15} luminanceThreshold={0.7} luminanceSmoothing={0.4} />
//           <DepthOfField focusDistance={0.02} focalLength={0.01} bokehScale={1.2} height={480} />
//         </EffectComposer>
//       </Canvas>

//       <Box
//         ref={scrollRef}
//         sx={{
//           position: 'absolute',
//           bottom: 120,
//           left: '50%',
//           transform: 'translateX(-50%)',
//           px: 2,
//           maxHeight: '50vh',
//           overflowY: 'auto',
//           display: 'flex',
//           flexDirection: 'column',
//           width: '100%',
//           maxWidth: '720px',
//           backdropFilter: 'blur(12px)',
//           backgroundColor: 'rgba(255, 255, 255, 0.3)',
//           borderRadius: 2,
//           padding: 2,
//           maxWidth: '720px',
//           '&::-webkit-scrollbar': {
//             width: '5px',
//           },
//           '&::-webkit-scrollbar-track': {
//             backgroundColor: '#c6c6c6ff',
//           },
//           '&::-webkit-scrollbar-thumb': {
//             backgroundColor: '#959595ff',
//             borderRadius: '5px',
//           }
//         }}
//       >
//         {messages.map((m, i) => (
//           <Typography
//             key={i}
//             variant="body2"
//             sx={{
//               mb: 1,
//               color: m.role === 'user' ? '#000' : '#434245ff',
//               fontFamily: 'Manrope',
//               fontWeight: m.role === 'user' ? 700 : 300,
//               textAlign: 'left',
//               whiteSpace: 'pre-line'
//             }}
//           >
//             {m.content}
//           </Typography>
//         ))}
//       </Box>

//       <Box
//         sx={{
//           position: 'absolute',
//           bottom: 80,
//           left: '50%',
//           transform: 'translateX(-50%)',
//           display: 'flex',
//           justifyContent: 'center',
//           gap: 1,
//           flexWrap: 'wrap',
//           maxWidth: 700
//         }}
//       >
//         {defaultQuestions.map((q, i) => (
//           <Chip
//             key={i}
//             label={q}
//             onClick={() => setInput(q)}
//             sx={{ fontFamily: 'Manrope', bgcolor: '#ffffffcc', fontSize:12 }}
//           />
//         ))}
//       </Box>

//       <Box
//         className="prompt-box"
//         sx={{
//           position: 'absolute',
//           bottom: 20,
//           left: '50%',
//           transform: 'translateX(-50%)',
//           display: 'flex',
//           justifyContent: 'center',
//           alignItems: 'center',
//           bgcolor: '#e7e7e7ff',
//           borderRadius: '20px',
//           mx: 'auto',
//           maxWidth: 600,
//           px: 2,
//           py: 1
//         }}
//       >
//         <TextField
//           fullWidth
//           variant="standard"
//           placeholder="Pregunta sobre cÃ©lulas madre"
//           InputProps={{
//             disableUnderline: true,
//             sx: { ml: 1, color: '#202020', fontFamily: 'Manrope' },
//             value: input,
//             onChange: (e) => setInput(e.target.value),
//             onKeyDown: (e) => e.key === 'Enter' && sendMessage(),
//             endAdornment: (
//               <InputAdornment position="end">
//                 <IconButton><MicIcon sx={{ color: '#202020' }} /></IconButton>
//                 <IconButton onClick={sendMessage} disabled={loading}>
//                   {loading ? <CircularProgress size={20} /> : <GraphicEqIcon sx={{ color: '#202020' }} />}
//                 </IconButton>
//               </InputAdornment>
//             )
//           }}
//         />
//       </Box>
//     </div>
//   )
// }


